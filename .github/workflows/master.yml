name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - feature

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Fetch all branches and tags
        run: git fetch --prune --unshallow

      - name: Determine Branch and Commit Count
        id: determine_branch
        run: |
          BRANCH=$(echo "${{ github.ref }}" | awk -F'/' '{print $NF}')
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          COMMIT_COUNT=$(git rev-list --count HEAD)
          if [ "$BRANCH" = "master" ]; then
            echo "::set-output name=version::$(($MAJOR_VERSION + 1)).0.0"
          elif [[ "$BRANCH" == "feature"* ]]; then
            IS_MERGE=$(git log --merges -n 1 --pretty=%P)
            if [[ $IS_MERGE ]]; then
              echo "::set-output name=version::$MAJOR_VERSION.$(($MINOR_VERSION + 1)).0"
            else
              echo "::set-output name=version::$CURRENT_VERSION"
            fi
          elif [[ "$BRANCH" == "fixes"* ]]; then
            echo "::set-output name=version::$MAJOR_VERSION.$MINOR_VERSION.$(($PATCH_VERSION + 1))"
          else
            echo "::error::Unsupported branch"
            exit 1
          fi

      - name: Build Docker Image
        run: |
          docker build -t simple-java-maven-app:latest --build-arg RUN_NUMBER=${{ steps.determine_branch_and_commit_count.outputs.version }} .
          
      - name: Push Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_EMAIL }} -p ${{ secrets.DOCKER_HUB }}
          docker tag simple-java-maven-app:latest denisiuss/simple-java-maven-app:latest
          docker push denisiuss/simple-java-maven-app:latest
          
      #- uses: actions/setup-node@v3
       # with:
        #  node-version: '14'
      #- name: Configure AWS credentials
       # uses: aws-actions/configure-aws-credentials@v1
       # with:
        #  aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
         # aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          #aws-region: eu-central-1
      #- name: Setup Terraform
       # uses: hashicorp/setup-terraform@v2
        #with:
         # terraform_wrapper: false
      #- name: Terraform Apply
       # id:   apply
        #run: |
         # cd terraform/
          #terraform init
          #terraform validate
          #terraform plan 
          #terraform apply -auto-approve

